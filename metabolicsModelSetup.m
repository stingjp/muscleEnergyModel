function metabolicsModelSetup()
    import org.opensim.modeling.*
        
    muscleKeys = {'addbrev_r', ...
                    'addlong_r', ...
                    'addmagDist_r', ...
                    'addmagIsch_r', ...
                    'addmagMid_r', ...
                    'addmagProx_r', ...
                    'bflh_r', ...
                    'bfsh_r', ...
                    'edl_r', ...
                    'ehl_r', ...
                    'fdl_r', ...
                    'fhl_r', ...
                    'gaslat_r', ...
                    'gasmed_r', ...
                    'glmax1_r', ...
                    'glmax2_r', ...
                    'glmax3_r', ...
                    'glmed1_r', ...
                    'glmed2_r', ...
                    'glmed3_r', ...
                    'glmin1_r', ...
                    'glmin2_r', ...
                    'glmin3_r', ...
                    'grac_r', ...
                    'iliacus_r', ...
                    'perbrev_r', ...
                    'perlong_r', ...
                    'piri_r', ...
                    'psoas_r', ...
                    'recfem_r', ...
                    'sart_r', ...
                    'semimem_r', ...
                    'semiten_r', ...
                    'soleus_r', ...
                    'tfl_r', ...
                    'tibant_r', ...
                    'tibpost_r', ...
                    'vasint_r', ...
                    'vaslat_r', ...
                    'vasmed_r', ...
                    'addbrev_l', ...
                    'addlong_l', ...
                    'addmagDist_l', ...
                    'addmagIsch_l', ...
                    'addmagMid_l', ...
                    'addmagProx_l', ...
                    'bflh_l', ...
                    'bfsh_l', ...
                    'edl_l', ...
                    'ehl_l', ...
                    'fdl_l', ...
                    'fhl_l', ...
                    'gaslat_l', ...
                    'gasmed_l', ...
                    'glmax1_l', ...
                    'glmax2_l', ...
                    'glmax3_l', ...
                    'glmed1_l', ...
                    'glmed2_l', ...
                    'glmed3_l', ...
                    'glmin1_l', ...
                    'glmin2_l', ...
                    'glmin3_l', ...
                    'grac_l', ...
                    'iliacus_l', ...
                    'perbrev_l', ...
                    'perlong_l', ...
                    'piri_l', ...
                    'psoas_l', ...
                    'recfem_l', ...
                    'sart_l', ...
                    'semimem_l', ...
                    'semiten_l', ...
                    'soleus_l', ...
                    'tfl_l', ...
                    'tibant_l', ...
                    'tibpost_l', ...
                    'vasint_l', ...
                    'vaslat_l', ...
                    'vasmed_l'};
    muscleKeys_long = {'add_brev_r', ...
                    'add_long_r', ...
                    'add_mag3_r', ...
                    'add_mag4_r', ...
                    'add_mag2_r', ...
                    'add_mag1_r', ...
                    'bifemlh_r', ...
                    'bifemsh_r', ...
                    'ext_dig_r', ...
                    'ext_hal_r', ...
                    'flex_dig_r', ...
                    'flex_hal_r', ...
                    'lat_gas_r', ...
                    'med_gas_r', ...
                    'glut_max1_r', ...
                    'glut_max2_r', ...
                    'glut_max3_r', ...
                    'glut_med1_r', ...
                    'glut_med2_r', ...
                    'glut_med3_r', ...
                    'glut_min1_r', ...
                    'glut_min2_r', ...
                    'glut_min3_r', ...
                    'grac_r', ...
                    'iliacus_r', ...
                    'per_brev_r', ...
                    'per_long_r', ...
                    'peri_r', ...
                    'psoas_r', ...
                    'rect_fem_r', ...
                    'sar_r', ...
                    'semimem_r', ...
                    'semiten_r', ...
                    'soleus_r', ...
                    'tfl_r', ...
                    'tib_ant_r', ...
                    'tib_post_r', ...
                    'vas_int_r', ...
                    'vas_lat_r', ...
                    'vas_med_r', ...
                    'add_brev_l', ...
                    'add_long_l', ...
                    'add_mag3_l', ...
                    'add_mag4_l', ...
                    'add_mag2_l', ...
                    'add_mag1_l', ...
                    'bifemlh_l', ...
                    'bifemsh_l', ...
                    'ext_dig_l', ...
                    'ext_hal_l', ...
                    'flex_dig_l', ...
                    'flex_hal_l', ...
                    'lat_gas_l', ...
                    'med_gas_l', ...
                    'glut_max1_l', ...
                    'glut_max2_l', ...
                    'glut_max3_l', ...
                    'glut_med1_l', ...
                    'glut_med2_l', ...
                    'glut_med3_l', ...
                    'glut_min1_l', ...
                    'glut_min2_l', ...
                    'glut_min3_l', ...
                    'grac_l', ...
                    'iliacus_l', ...
                    'per_brev_l', ...
                    'per_long_l', ...
                    'peri_l', ...
                    'psoas_l', ...
                    'rect_fem_l', ...
                    'sar_l', ...
                    'semimem_l', ...
                    'semiten_l', ...
                    'soleus_l', ...
                    'tfl_l', ...
                    'tib_ant_l', ...
                    'tib_post_l', ...
                    'vas_int_l', ...
                    'vas_lat_l', ...
                    'vas_med_l'};
    ratioVals = [0.5, ...
        0.5, ...
        0.55200000000000005, ...
        0.55200000000000005, ...
        0.55200000000000005, ...
        0.55200000000000005, ...
        0.54249999999999998, ...
        0.52900000000000003, ...
        0.75, ...
        0.75, ...
        0.59999999999999998, ...
        0.59999999999999998, ...
        0.50700000000000001, ...
        0.56599999999999995, ...
        0.55000000000000004, ...
        0.55000000000000004, ...
        0.55000000000000004, ...
        0.55000000000000004, ...
        0.55000000000000004, ...
        0.55000000000000004, ...
        0.55000000000000004, ...
        0.55000000000000004, ...
        0.55000000000000004, ...
        0.5, ...
        0.5, ...
        0.59999999999999998, ...
        0.59999999999999998, ...
        0.5, ...
        0.5, ...
        0.38650000000000001, ...
        0.5, ...
        0.49249999999999999, ...
        0.42499999999999999, ...
        0.80300000000000005, ...
        0.5, ...
        0.69999999999999996, ...
        0.59999999999999998, ...
        0.54300000000000004, ...
        0.45500000000000002, ...
        0.503, ...
        0.5, ...
        0.5, ...
        0.55200000000000005, ...
        0.55200000000000005, ...
        0.55200000000000005, ...
        0.55200000000000005, ...
        0.54249999999999998, ...
        0.52900000000000003, ...
        0.75, ...
        0.75, ...
        0.59999999999999998, ...
        0.59999999999999998, ...
        0.50700000000000001, ...
        0.56599999999999995, ...
        0.55000000000000004, ...
        0.55000000000000004, ...
        0.55000000000000004, ...
        0.55000000000000004, ...
        0.55000000000000004, ...
        0.55000000000000004, ...
        0.55000000000000004, ...
        0.55000000000000004, ...
        0.55000000000000004, ...
        0.5, ...
        0.5, ...
        0.59999999999999998, ...
        0.59999999999999998, ...
        0.5, ...
        0.5, ...
        0.38650000000000001, ...
        0.5, ...
        0.49249999999999999, ...
        0.42499999999999999, ...
        0.80300000000000005, ...
        0.5, ...
        0.69999999999999996, ...
        0.59999999999999998, ...
        0.54300000000000004, ...
        0.45500000000000002, ...
        0.503];

    muscleRatio = containers.Map(muscleKeys, ratioVals);
    muscleRatio_long = containers.Map(muscleKeys_long, ratioVals);
    
    % convert old model and stuff for 4.0
    model = Model('subject.osim');
    coordfile = StdVectorString();
    coordfile.add('coordinates.mot');
    try
        % the model and coordinates need updated
        opensimSimulation.updatePre40KinematicsFilesFor40MotionType(model, coordfile);
        opensimSimulation.updateSocketConnecteesBySearch(model);
        model.print('subject_updated.osim');
    catch
        % just the coordinates need updated
        oldmodel = Model('subject_old.osim');
        opensimSimulation.updatePre40KinematicsFilesFor40MotionType(oldmodel, coordfile);
        model.print('subject_updated.osim');

    % now to do stuff with the model
    modelProcessor = ModelProcessor(model);    
    % need to adjust some of the joints - weld them
    weldem = StdVectorString();
    weldem.add('subtalar_r');
    weldem.add('mtp_r');
    weldem.add('subtalar_l');
    weldem.add('mtp_l');
    % weldem.add('radius_hand_r');
    % weldem.add('radius_hand_l');
    
    modelProcessor.append(ModOpReplaceJointsWithWelds(weldem));
    model = modelProcessor.process();
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % might not work
    %{}

    % remove the previous metabolics probes
    probeset = model.getProbeSet();
    numProbes = probeset.getSize();
    taken = 0;
    for p = 0:numProbes-1
        probe = probeset.get(p-taken);
        probename = probe.getName();
        probeset.remove(probe);
        taken = taken + 1;
    end

    model.updProbeSet();

    % also potentially remove some limbs??
    getrid_body = {'humerus_r','ulna_r','radius_r','hand_r', ...
                    'humerus_l','ulna_l','radius_l','hand_l' ...
                    'femur_l','tibia_l','patella_l','talus_l','calcn_l','toes_l'};
    bodyset = model.getBodySet();
    numBodies = bodyset.getSize();
    taken = 0;
    for b = 0:numBodies-1
        body = bodyset.get(b-taken);
        bodyname = body.getName();
        if any(strcmp(getrid_body, bodyname))
            % get rid of the body
            bodyset.remove(body);
            taken = taken + 1;
        end
    end
    model.updBodySet();
    
    % edit joints
    getrid_joint = {'acromial_l','elbow_l','radioulnar_l','radius_hand_l', ...
                    'acromial_r','elbow_r','radioulnar_r','radius_hand_r', ...
                    'hip_l','walker_knee_l','patellofemoral_l','ankle_l','subtalar_l','mtp_l'};    
    
    jointset = model.getJointSet();
    numJoints = jointset.getSize();
    taken = 0;
    for j = 0:numJoints-1
        joint = jointset.get(j-taken);
        jointname = joint.getName();
        if any(strcmp(getrid_joint, jointname))
            % get rid of the joint
            jointset.remove(joint);
            taken = taken + 1;
        end
    end
    model.updJointSet();
    
    % edit constraints
    getrid_constraint = {'patellofemoral_knee_angle_l_con'};    
    constraintset = model.getConstraintSet();
    numConstraints = constraintset.getSize();
    taken = 0;
    for c = 0:numConstraints-1
        constraint = constraintset.get(c-taken);
        constraintname = constraint.getName();
        if any(strcmp(getrid_constraint, constraintname))
            % get rid of the constraint
            constraintset.remove(constraint);
            taken = taken + 1;
        end
    end
    model.updConstraintSet();
    
    % edit forceset - issue of two types of models
    
    
    forceset = model.getForceSet();
    numForce = forceset.getSize();
    numGroup = forceset.getNumGroups();
    
    getrid_force_group = {'left_leg','hip_add_l','hip_abd_l','hip_flex_l','hip_ext_l','hip_extrot_l', ...
                        'hip_inrot_l','knee_flex_l','knee_ext_l','ankle_df_l','ankle_pf_l','everter_l','inverter_l'};

    taken = 0;
    for g = 0:numGroup-1
        group = forceset.getGroup(g-taken);
        groupname = group.getName();
        if any(strcmp(getrid_force_group, groupname))
            % get rid of the force
            forceset.removeGroup(groupname);
            taken = taken + 1;
        end
    end
                    
                    
    getrid_force = {'shoulder_flex_r','shoulder_add_r','shoulder_rot_r', ...
                    'elbow_flex_r','pro_sup_r','wrist_flex_r','wrist_dev_r', ... ...
                    'shoulder_flex_l','shoulder_add_l','shoulder_rot_l', ...
                    'elbow_flex_l','pro_sup_l','wrist_flex_l','wrist_dev_l', ...
                    'addbrev_l', ...
                    'addlong_l', ...
                    'addmagDist_l', ...
                    'addmagIsch_l', ...
                    'addmagMid_l', ...
                    'addmagProx_l', ...
                    'bflh_l', ...
                    'bfsh_l', ...
                    'edl_l', ...
                    'ehl_l', ...
                    'fdl_l', ...
                    'fhl_l', ...
                    'gaslat_l', ...
                    'gasmed_l', ...
                    'glmax1_l', ...
                    'glmax2_l', ...
                    'glmax3_l', ...
                    'glmed1_l', ...
                    'glmed2_l', ...
                    'glmed3_l', ...
                    'glmin1_l', ...
                    'glmin2_l', ...
                    'glmin3_l', ...
                    'grac_l', ...
                    'iliacus_l', ...
                    'perbrev_l', ...
                    'perlong_l', ...
                    'piri_l', ...
                    'psoas_l', ...
                    'recfem_l', ...
                    'sart_l', ...
                    'semimem_l', ...
                    'semiten_l', ...
                    'soleus_l', ...
                    'tfl_l', ...
                    'tibant_l', ...
                    'tibpost_l', ...
                    'vasint_l', ...
                    'vaslat_l', ...
                    'vasmed_l', ...
                    'add_brev_l', ...
                    'add_long_l', ...
                    'add_mag3_l', ...
                    'add_mag4_l', ...
                    'add_mag2_l', ...
                    'add_mag1_l', ...
                    'bifemlh_l', ...
                    'bifemsh_l', ...
                    'ext_dig_l', ...
                    'ext_hal_l', ...
                    'flex_dig_l', ...
                    'flex_hal_l', ...
                    'lat_gas_l', ...
                    'med_gas_l', ...
                    'glut_max1_l', ...
                    'glut_max2_l', ...
                    'glut_max3_l', ...
                    'glut_med1_l', ...
                    'glut_med2_l', ...
                    'glut_med3_l', ...
                    'glut_min1_l', ...
                    'glut_min2_l', ...
                    'glut_min3_l', ...
                    'per_brev_l', ...
                    'per_long_l', ...
                    'peri_l', ...
                    'psoas_l', ...
                    'rect_fem_l', ...
                    'sar_l', ...
                    'tib_ant_l', ...
                    'tib_post_l', ...
                    'vas_int_l', ...
                    'vas_lat_l', ...
                    'vas_med_l'};    
    
    taken = 0;
    for f = 0:numForce-1
        force = forceset.get(f-taken);
        forcename = force.getName();
        if any(strcmp(getrid_force, forcename))
            % get rid of the force
            forceset.remove(force);
            taken = taken + 1;
        end
    end
    model.updForceSet();

    % edit the markers
    getrid_marker = {'R.MElbow','L.MElbow','R.Biceps','R.Elbow','R.Forearm','R.Wrist', ...
                    'L.Biceps','L.Elbow','L.Forearm','L.Wrist', ...
                    'L.TH1','L.TH2','L.TH3','L.TH4','L.Knee','L.SH1','L.SH2','L.SH3','L.Ankle','L.Toe','L.Heel','L.MT5','L_HJC','L_KJC','L_AJC','L.MKnee','L.MAnkle','L.AnkleJoint','L.KneeJoint','L.HeelGround','L.MT5Ground','L.ToeGround','L.AnkleJointGround'};
                
    markerset = model.getMarkerSet();
    numMarker = markerset.getSize();
    taken = 0;
    for m = 0:numMarker-1
        marker = markerset.get(m-taken);
        markername = marker.getName();
        if any(strcmp(getrid_marker, markername))
            % get rid of the marker
            markerset.remove(marker);
            taken = taken + 1;
        end
    end
    model.updMarkerSet();
    
    
    % edit the muscles now too?
    getrid_muscle = {'addbrev_l', ...
                    'addlong_l', ...
                    'addmagDist_l', ...
                    'addmagIsch_l', ...
                    'addmagMid_l', ...
                    'addmagProx_l', ...
                    'bflh_l', ...
                    'bfsh_l', ...
                    'edl_l', ...
                    'ehl_l', ...
                    'fdl_l', ...
                    'fhl_l', ...
                    'gaslat_l', ...
                    'gasmed_l', ...
                    'glmax1_l', ...
                    'glmax2_l', ...
                    'glmax3_l', ...
                    'glmed1_l', ...
                    'glmed2_l', ...
                    'glmed3_l', ...
                    'glmin1_l', ...
                    'glmin2_l', ...
                    'glmin3_l', ...
                    'grac_l', ...
                    'iliacus_l', ...
                    'perbrev_l', ...
                    'perlong_l', ...
                    'piri_l', ...
                    'psoas_l', ...
                    'recfem_l', ...
                    'sart_l', ...
                    'semimem_l', ...
                    'semiten_l', ...
                    'soleus_l', ...
                    'tfl_l', ...
                    'tibant_l', ...
                    'tibpost_l', ...
                    'vasint_l', ...
                    'vaslat_l', ...
                    'vasmed_l', ...
                    'add_brev_l', ...
                    'add_long_l', ...
                    'add_mag3_l', ...
                    'add_mag4_l', ...
                    'add_mag2_l', ...
                    'add_mag1_l', ...
                    'bifemlh_l', ...
                    'bifemsh_l', ...
                    'ext_dig_l', ...
                    'ext_hal_l', ...
                    'flex_dig_l', ...
                    'flex_hal_l', ...
                    'lat_gas_l', ...
                    'med_gas_l', ...
                    'glut_max1_l', ...
                    'glut_max2_l', ...
                    'glut_max3_l', ...
                    'glut_med1_l', ...
                    'glut_med2_l', ...
                    'glut_med3_l', ...
                    'glut_min1_l', ...
                    'glut_min2_l', ...
                    'glut_min3_l', ...
                    'per_brev_l', ...
                    'per_long_l', ...
                    'peri_l', ...
                    'psoas_l', ...
                    'rect_fem_l', ...
                    'sar_l', ...
                    'tib_ant_l', ...
                    'tib_post_l', ...
                    'vas_int_l', ...
                    'vas_lat_l', ...
                    'vas_med_l'};
    
    

    muscleset = model.getMuscles();
    numMuscle = muscleset.getSize();            
    taken = 0;
    for m = 0:numMuscle-1
        muscle = muscleset.get(m-taken);
        musclename = muscle.getName();
        if any(strcmp(getrid_muscle, musclename))
            % get rid of the force
            muscleset.remove(muscle);
            taken = taken + 1;
        end
    end
    
    model.updMuscles();
    
    
    %}
    muscleset = model.getMuscles();
    numMuscle = muscleset.getSize();            
    


    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    % actually works

    probe_all = Umberger2010MuscleMetabolicsProbe();
    model.addProbe(probe_all);
    probe_act = Umberger2010MuscleMetabolicsProbe();
    model.addProbe(probe_act);
    probe_short = Umberger2010MuscleMetabolicsProbe();
    model.addProbe(probe_short);
    probe_basal = Umberger2010MuscleMetabolicsProbe();
    model.addProbe(probe_basal);
    probe_mech = Umberger2010MuscleMetabolicsProbe();
    model.addProbe(probe_mech);
    


    % now to add probes and things for metabolics

    probe_all.setName('all_metabolics');
    % probe_all.set_use_Bhargava_recruitment_model(false);

    probe_act.setName('all_activation_maintenance_rate');
    probe_act.set_activation_maintenance_rate_on(true);
    probe_act.set_shortening_rate_on(false);
    probe_act.set_basal_rate_on(false);
    probe_act.set_mechanical_work_rate_on(false);
    % probe_act.set_use_Bhargava_recruitment_model(false);

    probe_short.setName("all_shortening_rate");
    probe_short.set_activation_maintenance_rate_on(false);
    probe_short.set_shortening_rate_on(true);
    probe_short.set_basal_rate_on(false);
    probe_short.set_mechanical_work_rate_on(false);
    % probe_short.set_use_Bhargava_recruitment_model(false);
    
    probe_basal.setName("all_basal_rate");
    probe_basal.set_activation_maintenance_rate_on(false);
    probe_basal.set_shortening_rate_on(false);
    probe_basal.set_basal_rate_on(true);
    probe_basal.set_mechanical_work_rate_on(false);
    % probe_basal.set_use_Bhargava_recruitment_model(false);

    probe_mech.setName("all_mechanical_work_rate");
    probe_mech.set_activation_maintenance_rate_on(false);
    probe_mech.set_shortening_rate_on(false);
    probe_mech.set_basal_rate_on(false);
    probe_mech.set_mechanical_work_rate_on(true);
    % probe_mech.set_use_Bhargava_recruitment_model(false);
    
    % add muscles to each probe setup
    numMuscle = muscleset.getSize();
    if strcmp(char(muscleset.get(0).getName()),'addbrev_r')
        for m = 0:numMuscle-1
            musc = muscleset.get(m);
            muscName = musc.getName();
            muscName = char(muscName);
            probe_all.addMuscle(muscName, muscleRatio(muscName));
            % probe_all.setSpecificTension(muscName, 300000);    
            probe_act.addMuscle(muscName, muscleRatio(muscName));
            % probe_act.setSpecificTension(muscName, 300000);
            probe_short.addMuscle(muscName, muscleRatio(muscName));
            % probe_short.setSpecificTension(muscName, 300000);
            probe_basal.addMuscle(muscName, muscleRatio(muscName));
            % probe_basal.setSpecificTension(muscName, 300000);
            probe_mech.addMuscle(muscName, muscleRatio(muscName));
            % probe_mech.setSpecificTension(muscName, 300000);
        end
    else
        for m = 0:numMuscle-1
            musc = muscleset.get(m);
            muscName = musc.getName();
            muscName = char(muscName);
            probe_all.addMuscle(muscName, muscleRatio_long(muscName));
            % probe_all.setSpecificTension(muscName, 300000);
            probe_act.addMuscle(muscName, muscleRatio_long(muscName));
            % probe_act.setSpecificTension(muscName, 300000);
            probe_short.addMuscle(muscName, muscleRatio_long(muscName));
            % probe_short.setSpecificTension(muscName, 300000);
            probe_basal.addMuscle(muscName, muscleRatio_long(muscName));
            % probe_basal.setSpecificTension(muscName, 300000);
            probe_mech.addMuscle(muscName, muscleRatio_long(muscName));
            % probe_mech.setSpecificTension(muscName, 300000);
        end
    end

    model.finalizeConnections();

    % now change the specific tension
    if strcmp(char(muscleset.get(0).getName()),'addbrev_r')
        for m = 0:numMuscle-1
            musc = muscleset.get(m);
            muscName = musc.getName();
            muscName = char(muscName);
            % probe_all.addMuscle(muscName, muscleRatio(muscName));
            probe_all.setSpecificTension(muscName, 600000);    
            % probe_act.addMuscle(muscName, muscleRatio(muscName));
            probe_act.setSpecificTension(muscName, 600000);
            % probe_short.addMuscle(muscName, muscleRatio(muscName));
            probe_short.setSpecificTension(muscName, 600000);
            % probe_basal.addMuscle(muscName, muscleRatio(muscName));
            probe_basal.setSpecificTension(muscName, 600000);
            % probe_mech.addMuscle(muscName, muscleRatio(muscName));
            probe_mech.setSpecificTension(muscName, 600000);
        end
    else
        for m = 0:numMuscle-1
            musc = muscleset.get(m);
            muscName = musc.getName();
            muscName = char(muscName);
            % probe_all.addMuscle(muscName, muscleRatio_long(muscName));
            probe_all.setSpecificTension(muscName, 600000);
            % probe_act.addMuscle(muscName, muscleRatio_long(muscName));
            probe_act.setSpecificTension(muscName, 600000);
            % probe_short.addMuscle(muscName, muscleRatio_long(muscName));
            probe_short.setSpecificTension(muscName, 600000);
            % probe_basal.addMuscle(muscName, muscleRatio_long(muscName));
            probe_basal.setSpecificTension(muscName, 600000);
            % probe_mech.addMuscle(muscName, muscleRatio_long(muscName));
            probe_mech.setSpecificTension(muscName, 600000);
        end
    end


    %{
        % save this for later when everything is actually working
        
        for m = 0:numMuscles-1
            musc = muscleSet.get(m);
            muscName = musc.getName();
            muscName = char(muscName);
            
            % add a probe for each muscle
            probe = Umberger2010MuscleMetabolicsProbe();
            probe.setName(strcat("metabolics_", muscName));
            probe.addMuscle(muscName, muscleRatio(muscName));
            model.addProbe(probe);
            
            probe = Umberger2010MuscleMetabolicsProbe();
            probe.setName(strcat('activation_maintenance_rate_',muscName));
            probe.set_activation_maintenance_rate_on(true);
            probe.set_shortening_rate_on(false);
            probe.set_basal_rate_on(false);
            probe.set_mechanical_work_rate_on(false);
            probe.addMuscle(muscName, muscleRatio(muscName));
            model.addProbe(probe);
            
            probe = Umberger2010MuscleMetabolicsProbe();
            probe.setName(strcat("shortening_rate_",muscName));
            probe.set_activation_maintenance_rate_on(false);
            probe.set_shortening_rate_on(true);
            probe.set_basal_rate_on(false);
            probe.set_mechanical_work_rate_on(false);
            probe.addMuscle(muscName, muscleRatio(muscName));
            model.addProbe(probe);
            
            probe = Umberger2010MuscleMetabolicsProbe();
            probe.setName(strcat("basal_rate_",muscName));
            probe.set_activation_maintenance_rate_on(false);
            probe.set_shortening_rate_on(false);
            probe.set_basal_rate_on(true);
            probe.set_mechanical_work_rate_on(false);
            probe.addMuscle(muscName, muscleRatio(muscName));
            model.addProbe(probe);
            
            probe = Umberger2010MuscleMetabolicsProbe();
            probe.setName(strcat("mechanical_work_rate_",muscName));
            probe.set_activation_maintenance_rate_on(false);
            probe.set_shortening_rate_on(false);
            probe.set_basal_rate_on(false);
            probe.set_mechanical_work_rate_on(true);
            probe.addMuscle(muscName, muscleRatio(muscName));
            model.addProbe(probe);
            
        end
    %}
    
    model.finalizeConnections();
    model.print('simple_model_all_the_probes.osim');  
end
