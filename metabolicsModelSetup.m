function metabolicsModelSetup()
    import org.opensim.modeling.*
        
    muscleKeys = {'addbrev_r', ...
                    'addlong_r', ...
                    'addmagDist_r', ...
                    'addmagIsch_r', ...
                    'addmagMid_r', ...
                    'addmagProx_r', ...
                    'bflh_r', ...
                    'bfsh_r', ...
                    'edl_r', ...
                    'ehl_r', ...
                    'fdl_r', ...
                    'fhl_r', ...
                    'gaslat_r', ...
                    'gasmed_r', ...
                    'glmax1_r', ...
                    'glmax2_r', ...
                    'glmax3_r', ...
                    'glmed1_r', ...
                    'glmed2_r', ...
                    'glmed3_r', ...
                    'glmin1_r', ...
                    'glmin2_r', ...
                    'glmin3_r', ...
                    'grac_r', ...
                    'iliacus_r', ...
                    'perbrev_r', ...
                    'perlong_r', ...
                    'piri_r', ...
                    'psoas_r', ...
                    'recfem_r', ...
                    'sart_r', ...
                    'semimem_r', ...
                    'semiten_r', ...
                    'soleus_r', ...
                    'tfl_r', ...
                    'tibant_r', ...
                    'tibpost_r', ...
                    'vasint_r', ...
                    'vaslat_r', ...
                    'vasmed_r', ...
                    'addbrev_l', ...
                    'addlong_l', ...
                    'addmagDist_l', ...
                    'addmagIsch_l', ...
                    'addmagMid_l', ...
                    'addmagProx_l', ...
                    'bflh_l', ...
                    'bfsh_l', ...
                    'edl_l', ...
                    'ehl_l', ...
                    'fdl_l', ...
                    'fhl_l', ...
                    'gaslat_l', ...
                    'gasmed_l', ...
                    'glmax1_l', ...
                    'glmax2_l', ...
                    'glmax3_l', ...
                    'glmed1_l', ...
                    'glmed2_l', ...
                    'glmed3_l', ...
                    'glmin1_l', ...
                    'glmin2_l', ...
                    'glmin3_l', ...
                    'grac_l', ...
                    'iliacus_l', ...
                    'perbrev_l', ...
                    'perlong_l', ...
                    'piri_l', ...
                    'psoas_l', ...
                    'recfem_l', ...
                    'sart_l', ...
                    'semimem_l', ...
                    'semiten_l', ...
                    'soleus_l', ...
                    'tfl_l', ...
                    'tibant_l', ...
                    'tibpost_l', ...
                    'vasint_l', ...
                    'vaslat_l', ...
                    'vasmed_l'};
    
    muscleKeys_long = {'add_brev_r', ...
                    'add_long_r', ...
                    'add_mag3_r', ...
                    'add_mag4_r', ...
                    'add_mag2_r', ...
                    'add_mag1_r', ...
                    'bifemlh_r', ...
                    'bifemsh_r', ...
                    'ext_dig_r', ...
                    'ext_hal_r', ...
                    'flex_dig_r', ...
                    'flex_hal_r', ...
                    'lat_gas_r', ...
                    'med_gas_r', ...
                    'glut_max1_r', ...
                    'glut_max2_r', ...
                    'glut_max3_r', ...
                    'glut_med1_r', ...
                    'glut_med2_r', ...
                    'glut_med3_r', ...
                    'glut_min1_r', ...
                    'glut_min2_r', ...
                    'glut_min3_r', ...
                    'grac_r', ...
                    'iliacus_r', ...
                    'per_brev_r', ...
                    'per_long_r', ...
                    'peri_r', ...
                    'psoas_r', ...
                    'rect_fem_r', ...
                    'sar_r', ...
                    'semimem_r', ...
                    'semiten_r', ...
                    'soleus_r', ...
                    'tfl_r', ...
                    'tib_ant_r', ...
                    'tib_post_r', ...
                    'vas_int_r', ...
                    'vas_lat_r', ...
                    'vas_med_r', ...
                    'add_brev_l', ...
                    'add_long_l', ...
                    'add_mag3_l', ...
                    'add_mag4_l', ...
                    'add_mag2_l', ...
                    'add_mag1_l', ...
                    'bifemlh_l', ...
                    'bifemsh_l', ...
                    'ext_dig_l', ...
                    'ext_hal_l', ...
                    'flex_dig_l', ...
                    'flex_hal_l', ...
                    'lat_gas_l', ...
                    'med_gas_l', ...
                    'glut_max1_l', ...
                    'glut_max2_l', ...
                    'glut_max3_l', ...
                    'glut_med1_l', ...
                    'glut_med2_l', ...
                    'glut_med3_l', ...
                    'glut_min1_l', ...
                    'glut_min2_l', ...
                    'glut_min3_l', ...
                    'grac_l', ...
                    'iliacus_l', ...
                    'per_brev_l', ...
                    'per_long_l', ...
                    'peri_l', ...
                    'psoas_l', ...
                    'rect_fem_l', ...
                    'sar_l', ...
                    'semimem_l', ...
                    'semiten_l', ...
                    'soleus_l', ...
                    'tfl_l', ...
                    'tib_ant_l', ...
                    'tib_post_l', ...
                    'vas_int_l', ...
                    'vas_lat_l', ...
                    'vas_med_l'};

    ratioVals = [0.5, ...
        0.5, ...
        0.55200000000000005, ...
        0.55200000000000005, ...
        0.55200000000000005, ...
        0.55200000000000005, ...
        0.54249999999999998, ...
        0.52900000000000003, ...
        0.75, ...
        0.75, ...
        0.59999999999999998, ...
        0.59999999999999998, ...
        0.50700000000000001, ...
        0.56599999999999995, ...
        0.55000000000000004, ...
        0.55000000000000004, ...
        0.55000000000000004, ...
        0.55000000000000004, ...
        0.55000000000000004, ...
        0.55000000000000004, ...
        0.55000000000000004, ...
        0.55000000000000004, ...
        0.55000000000000004, ...
        0.5, ...
        0.5, ...
        0.59999999999999998, ...
        0.59999999999999998, ...
        0.5, ...
        0.5, ...
        0.38650000000000001, ...
        0.5, ...
        0.49249999999999999, ...
        0.42499999999999999, ...
        0.80300000000000005, ...
        0.5, ...
        0.69999999999999996, ...
        0.59999999999999998, ...
        0.54300000000000004, ...
        0.45500000000000002, ...
        0.503, ...
        0.5, ...
        0.5, ...
        0.55200000000000005, ...
        0.55200000000000005, ...
        0.55200000000000005, ...
        0.55200000000000005, ...
        0.54249999999999998, ...
        0.52900000000000003, ...
        0.75, ...
        0.75, ...
        0.59999999999999998, ...
        0.59999999999999998, ...
        0.50700000000000001, ...
        0.56599999999999995, ...
        0.55000000000000004, ...
        0.55000000000000004, ...
        0.55000000000000004, ...
        0.55000000000000004, ...
        0.55000000000000004, ...
        0.55000000000000004, ...
        0.55000000000000004, ...
        0.55000000000000004, ...
        0.55000000000000004, ...
        0.5, ...
        0.5, ...
        0.59999999999999998, ...
        0.59999999999999998, ...
        0.5, ...
        0.5, ...
        0.38650000000000001, ...
        0.5, ...
        0.49249999999999999, ...
        0.42499999999999999, ...
        0.80300000000000005, ...
        0.5, ...
        0.69999999999999996, ...
        0.59999999999999998, ...
        0.54300000000000004, ...
        0.45500000000000002, ...
        0.503];

    muscleRatio = containers.Map(muscleKeys, ratioVals);
    muscleRatio_long = containers.Map(muscleKeys_long, ratioVals);
    
    % convert old model and stuff for 4.0
    model = Model('subject.osim');
    coordfile = StdVectorString();
    coordfile.add('coordinates.mot');
    opensimSimulation.updatePre40KinematicsFilesFor40MotionType(model, coordfile);
    opensimSimulation.updateSocketConnecteesBySearch(model);
    model.print('subject_updated.osim');



    % now to do stuff with the model
    modelProcessor = ModelProcessor(model);    
    % need to adjust some of the joints - weld them
    weldem = StdVectorString();
    weldem.add('subtalar_r');
    weldem.add('mtp_r');
    weldem.add('subtalar_l');
    weldem.add('mtp_l');
    % weldem.add('radius_hand_r');
    % weldem.add('radius_hand_l');
    
    modelProcessor.append(ModOpReplaceJointsWithWelds(weldem));
    model = modelProcessor.process();
    
    %{
    % also potentially remove some limbs??
    getrid = {'humerus_r','ulna_r','radius_r','hand_r','humerus_l','ulna_l','radius_l','hand_l'};
    bodyset = model.getBodySet();
    numBodies = bodyset.getSize();
    taken = 0;
    for b = 0:numBodies-1
        body = bodyset.get(b-taken);
        bodyname = body.getName()
        if any(strcmp(getrid, bodyname))
            % get rid of the body
            bodyset.remove(body);
            taken = taken + 1;
        end
    end
    model.updBodySet();
    %}
    
    % now to add probes and things for metabolics
    muscleSet = model.getMuscles();
    numMuscles = muscleSet.getSize();
    
    probe_all = Umberger2010MuscleMetabolicsProbe();
    probe_all.setName('all_metabolics');
    
    probe_act = Umberger2010MuscleMetabolicsProbe();
    probe_act.setName('all_activation_maintenance_rate');
    probe_act.set_activation_maintenance_rate_on(true);
    probe_act.set_shortening_rate_on(false);
    probe_act.set_basal_rate_on(false);
    probe_act.set_mechanical_work_rate_on(false);

    probe_short = Umberger2010MuscleMetabolicsProbe();
    probe_short.setName("all_shortening_rate");
    probe_short.set_activation_maintenance_rate_on(false);
    probe_short.set_shortening_rate_on(true);
    probe_short.set_basal_rate_on(false);
    probe_short.set_mechanical_work_rate_on(false);

    probe_basal = Umberger2010MuscleMetabolicsProbe();
    probe_basal.setName("all_basal_rate");
    probe_basal.set_activation_maintenance_rate_on(false);
    probe_basal.set_shortening_rate_on(false);
    probe_basal.set_basal_rate_on(true);
    probe_basal.set_mechanical_work_rate_on(false);

    probe_mech = Umberger2010MuscleMetabolicsProbe();
    probe_mech.setName("all_mechanical_work_rate");
    probe_mech.set_activation_maintenance_rate_on(false);
    probe_mech.set_shortening_rate_on(false);
    probe_mech.set_basal_rate_on(false);
    probe_mech.set_mechanical_work_rate_on(true);    
    
    
    if strcmp(char(muscleSet.get(0).getName()),'addbrev_r')
        for m = 0:numMuscles-1
            musc = muscleSet.get(m);
            muscName = musc.getName();
            muscName = char(muscName);
            probe_all.addMuscle(muscName, muscleRatio(muscName));
            probe_act.addMuscle(muscName, muscleRatio(muscName));
            probe_short.addMuscle(muscName, muscleRatio(muscName));
            probe_basal.addMuscle(muscName, muscleRatio(muscName));
            probe_mech.addMuscle(muscName, muscleRatio(muscName));
        end
    else
        for m = 0:numMuscles-1
            musc = muscleSet.get(m);
            muscName = musc.getName();
            muscName = char(muscName);
            probe_all.addMuscle(muscName, muscleRatio_long(muscName));
            probe_act.addMuscle(muscName, muscleRatio_long(muscName));
            probe_short.addMuscle(muscName, muscleRatio_long(muscName));
            probe_basal.addMuscle(muscName, muscleRatio_long(muscName));
            probe_mech.addMuscle(muscName, muscleRatio_long(muscName));
        end
    end

    model.addProbe(probe_all);
    model.addProbe(probe_act);
    model.addProbe(probe_short);
    model.addProbe(probe_basal);
    model.addProbe(probe_mech);
    
    %{
        % save this for later when everything is actually working
        
        for m = 0:numMuscles-1
            musc = muscleSet.get(m);
            muscName = musc.getName();
            muscName = char(muscName);
            
            % add a probe for each muscle
            probe = Umberger2010MuscleMetabolicsProbe();
            probe.setName(strcat("metabolics_", muscName));
            probe.addMuscle(muscName, muscleRatio(muscName));
            model.addProbe(probe);
            
            probe = Umberger2010MuscleMetabolicsProbe();
            probe.setName(strcat('activation_maintenance_rate_',muscName));
            probe.set_activation_maintenance_rate_on(true);
            probe.set_shortening_rate_on(false);
            probe.set_basal_rate_on(false);
            probe.set_mechanical_work_rate_on(false);
            probe.addMuscle(muscName, muscleRatio(muscName));
            model.addProbe(probe);
            
            probe = Umberger2010MuscleMetabolicsProbe();
            probe.setName(strcat("shortening_rate_",muscName));
            probe.set_activation_maintenance_rate_on(false);
            probe.set_shortening_rate_on(true);
            probe.set_basal_rate_on(false);
            probe.set_mechanical_work_rate_on(false);
            probe.addMuscle(muscName, muscleRatio(muscName));
            model.addProbe(probe);
            
            probe = Umberger2010MuscleMetabolicsProbe();
            probe.setName(strcat("basal_rate_",muscName));
            probe.set_activation_maintenance_rate_on(false);
            probe.set_shortening_rate_on(false);
            probe.set_basal_rate_on(true);
            probe.set_mechanical_work_rate_on(false);
            probe.addMuscle(muscName, muscleRatio(muscName));
            model.addProbe(probe);
            
            probe = Umberger2010MuscleMetabolicsProbe();
            probe.setName(strcat("mechanical_work_rate_",muscName));
            probe.set_activation_maintenance_rate_on(false);
            probe.set_shortening_rate_on(false);
            probe.set_basal_rate_on(false);
            probe.set_mechanical_work_rate_on(true);
            probe.addMuscle(muscName, muscleRatio(muscName));
            model.addProbe(probe);
            
        end
    %}
    
    model.finalizeConnections();
    model.print('simple_model_all_the_probes.osim');  
end
